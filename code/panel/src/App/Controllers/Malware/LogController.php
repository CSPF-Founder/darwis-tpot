<?php
/*
 * Copyright (c) 2023 CySecurity Pte. Ltd. - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by CySecurity Pte. Ltd.
 */

namespace App\Controllers\Malware;

use Core\AuthController;

use App\ApiClient\ApiBuilder;
use App\Config;
use App\Enums\Malware\Verdict;
use Core\Flash;
use Core\Security\Validator;
use Core\View;
use DateTime;
use DateTimeZone;
use Exception;

class LogController extends AuthController
{
    /**
     * * Get API builder instance
     */
    private function __getApiBuilderInstance()
    {
        return new ApiBuilder(Config::getXdtApiUrl());
    }


    /**
     * * Fetch log records and return in json format
     */
    private function __getLogRecords()
    {
        $page = filter_var($_POST['draw'], FILTER_VALIDATE_INT);
        $limit = filter_var($_POST['length'], FILTER_VALIDATE_INT);
        if (!$limit) {
            $limit = 30;
        }

        // if ($limit == "-1") {
        //     $limit = 0;
        // }

        $filter_data = null;
        if (isset($_POST['filter_data']) && $_POST['filter_data']) {
            $filter_data = $_POST['filter_data'];
        }

        $verdict = null;
        if (isset($filter_data['verdict']) && $filter_data['verdict']) {
            $verdict = filter_var($filter_data['verdict'], FILTER_VALIDATE_INT);
            if ($verdict === false) {
                View::throwAppError("Invalid Verdict");
            }
        } else {
            $verdict = 0;
        }

        $newly_detected = false;
        if (isset($filter_data['newly_detected']) && $filter_data['newly_detected']) {
            $newly_detected = true;
        }

        $from_time = null;
        $to_time = null;

        if (isset($filter_data['from_time']) && $filter_data['from_time']) {
            if (Validator::getDateTimeFromString($filter_data['from_time']) === false) {
                View::throwAppError("Invalid date input");
            }
            $from_time = new DateTime($filter_data['from_time']);
            $from_time->setTime(0, 0);
        }
        if (isset($filter_data['to_time']) && $filter_data['to_time']) {
            if (Validator::getDateTimeFromString($filter_data['to_time']) === false) {
                View::throwAppError("Invalid date input");
            }
            $to_time = new DateTime($filter_data['to_time']);
            $to_time->setTime(23, 59);
        }
        
        if (!$from_time){
            $from_time = new DateTime();
            $from_time = $from_time->modify("-3 months");
        }

        if (!$to_time){
            $to_time = new DateTime();
        }
        
        if ($from_time && $to_time && $from_time > $to_time) {
            View::throwAppError("Invalid date input");
        }

        $url = 'dt/malware/logs?from_date=' . $from_time->format('Y-m-d') . "&to_date=" . $to_time->format('Y-m-d') . "&verdict=" . $verdict . "&limit=" . $limit . "&page=" . $page;
        if ($newly_detected) {
            $url .=  "&newly_detected=1";
        }

      
        try{
            $api = $this->__getApiBuilderInstance();
            $api_response = $api->request->asJson()->get($url)->json();
    
            $this->checkApiFailure($api_response);
        } catch (Exception $app_error){
            $error_msg = $app_error->getMessage();
            if (str_contains(strtolower($error_msg), "invalid api")) {
                Flash::addMessage("The API key is either Invalid or expired", Flash::WARNING);
            } else {
                Flash::addMessage($app_error->getMessage(), Flash::WARNING);
            }

            $json_data = array(
                "draw"            => intval($_POST['draw']),
                "recordsTotal"    => 0,
                "recordsFiltered" => [],
                "records"         => [],
            );
    
            View::displayJson($json_data);
            return;
        }
        $total_records = $api_response["total_records"] ?? 0;

        $records = [];
        foreach ($api_response['data'] as $key => $value) {
            
            $id =  $value['id'] ?? '';
            $sha256 =  $value['sha256'] ?? '';
            $entry_verdict = (int) $value['verdict'] ?? '0';
            $verdict = Verdict::getString($entry_verdict);
            if ($entry_verdict == Verdict::MALICIOUS && $value['newly_detected'] ?? '') {
                $verdict =  "New Malware";
            }

            $file_path = Config::DT_MALWARE_ROOT_FOLDER . $sha256;
            if ($entry_verdict === Verdict::MALICIOUS) {
                if (
                    isset($value['malware_name']) && $value['malware_name']
                    && $value['malware_name'] != ""
                ) {
                    $malware_name = $value['malware_name'];
                } else {
                    $malware_name = "";
                }
            }

            $new_date = new DateTime($value["incident_time"] ?? '');
            $incident_time_dt = $new_date;
            $incident_time_dt->setTimezone(new DateTimeZone("Asia/Kolkata"));
            $incident_time = $incident_time_dt->format("d-M-Y H:i:s");
            // $link = "<a href='view?id=" . $id . "'> view</a>";

            $actions = '<button type="button" class="btn btn-sm btn-primary local-file-path-btn"  title="Local File Path (inside honeypot vm)" data-coreui-content="' . $file_path . '"><i class="fa fa-file"></i></button>';

            $arr_data = array(
                'id' => $id,
                'sha256' => $sha256,
                'verdict' => $verdict,
                'new_date' => $new_date,
                'incident_time' => $incident_time,
                // 'link' => $link,
                "malware_name" => $malware_name,
                "actions" => $actions
            );
            $records[] =  $arr_data;
        }

        $json_data = array(
            "draw"            => intval($_POST['draw']),
            "recordsTotal"    => $total_records,
            "recordsFiltered" => $total_records,
            "records"         => $records,
        );

        View::displayJson($json_data);
    }

    /**
     * @throws \Exception
     */
    public function listAction()
    {

        if ($_SERVER['REQUEST_METHOD'] === 'GET') {
            $from_time = null;
            $to_time = null;
            if (isset($_GET['from_time'])) {
                if (Validator::getDateTimeFromString($_GET['from_time']) === false) {
                    View::throwAppError("Invalid date input");
                }
                $from_time = new DateTime($_GET['from_time']);
            }
            if (isset($_GET['to_time'])) {
                if (Validator::getDateTimeFromString($_GET['to_time']) === false) {
                    View::throwAppError("Invalid date input");
                }
                $to_time = new DateTime($_GET['to_time']);
            }

            if (!$from_time){
                $from_time = new DateTime();
                $from_time = $from_time->modify("-3 months");
            }

            if (!$to_time){
                $to_time = new DateTime();
            }
            
            if ($from_time && $to_time && $from_time > $to_time) {
                View::throwAppError("Invalid date input");
            }

            $verdict = null;
            if (isset($_GET['verdict']) && $_GET['verdict']) {
                $verdict = filter_var($_GET['verdict'], FILTER_VALIDATE_INT);
                if ($verdict === false) {
                    View::throwAppError("Invalid Verdict");
                }
            } else {
                $verdict = 0;
            }
            $this->masterView('Malware/Log/list.php', [
                "from_time" => $from_time,
                "to_time" => $to_time,
                "verdict" => $verdict
            ]);
        } elseif ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $this->__getLogRecords();
        }
    }
    public function viewAction()
    {
        if (isset($_GET['id'])) {
            $id = $_GET['id'];
        }
        if (!$id) {
            View::throwAppError("Invalid id");
        }
        $api = $this->__getApiBuilderInstance();
        $api_response = $api->request->asJson()->get('dt/malware/logs/' . $id)->json();

        $this->checkApiFailure($api_response);

        $data = $api_response;
        $malware_name = $data["malware_name"] ?? '';
        $sha256_hash = $data["sha256"] ?? '';
        $this->masterView('Malware/Log/view.php', [
            "malware_name" => $malware_name,
            "sha256_hash" => $sha256_hash
        ]);
    }
}
