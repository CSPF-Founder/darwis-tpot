<?php
/*
 * Copyright (c) 2023 CySecurity Pte. Ltd. - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by CySecurity Pte. Ltd.
 */

namespace App\Controllers\Malware;

use Core\AuthController;

use App\ApiClient\ApiBuilder;
use App\Config;
use Core\AppError;
use Core\Flash;
use Core\Security\Validator;
use Core\View;
use DateTime;
use Exception;

class DashboardController extends AuthController
{
    /**
     * * Get API builder instance
     */
    private function __getApiBuilderInstance()
    {
        return new ApiBuilder(Config::getXdtApiUrl());
    }

    protected function viewAction()
    {
        // $honeypot_stats = null;

        $honeypot_start_date = new DateTime();
        $honeypot_start_date = $honeypot_start_date->modify("-3 months");
        $honeypot_first_record_date = $honeypot_start_date;
        $honeypot_end_date = new DateTime();
        try{
            $api = $this->__getApiBuilderInstance();

            $api_response = $api->request->asJson()->get('dt/malware/stats')->json();
 
            $this->checkApiFailure($api_response);
        } catch (Exception $app_error){
            $error_msg = $app_error->getMessage();
            if (str_contains(strtolower($error_msg), "invalid api")) {
                Flash::addMessage("The API key is either Invalid or expired", Flash::WARNING);
            } else {
                Flash::addMessage($app_error->getMessage(), Flash::WARNING);
            }

            // maintain this order of stats_data to match the order of the chart
            $stats_data = [
                "New Malware"  => 0,
                "Malicious" => 0,
                "Clean" => 0,
                "Whitelist" => 0,
            ];
    
            $this->masterView('Malware/Dashboard/view.php', [
                "honeypot_stats" => $stats_data,
                "honeypot_start_date" => $honeypot_start_date,
                "honeypot_end_date" => $honeypot_end_date,
                "honeypot_first_record_date" => $honeypot_first_record_date,
                "empty_data" => true,
                "disable_buttons" => true,
                "invalid_key" => true,
            ]);
            return;
        }

        $data = $api_response["data"];

        $empty_data = true; 

        // maintain this order of stats_data to match the order of the chart
        $stats_data = [
            "New Malware"  => 0,
            "Malicious" => 0,
            "Clean" => 0,
            "Whitelist" => 0,
        ];

        $human_readable_data = array(
            "new_malware" => "New Malware",
            "malicious" => "Malicious",
            "clean" => "Clean",
            "whitelist" => "Whitelist"
        );

        // make it human readable as well as make it compatible with the chart
        foreach ($data as $key => $value) {
            if ($value > 0) {
                $empty_data = false;
            }

            $stats_data[$human_readable_data[$key]] = $value;
        }

        $this->masterView('Malware/Dashboard/view.php', [
            "honeypot_stats" => $stats_data,
             "honeypot_start_date" => $honeypot_start_date,
            "honeypot_end_date" => $honeypot_end_date,
             "honeypot_first_record_date" => $honeypot_first_record_date,
            "empty_data" => $empty_data,
            "disable_buttons" => false,
            "invalid_key" => false,
        ]);
    }


    /**
     * @throws AppError
     */
    protected function getStatsAction()
    {

        $required_params = array("from_time", "to_time");

        if (!Validator::checkAllParamsExists($required_params)) {
            View::throwAppError("Invalid request");
        }

        if (Validator::getDateTimeFromString($_POST['from_time']) === false) {
            View::throwAppError("Invalid date input");
        }
        if (Validator::getDateTimeFromString($_POST['to_time']) === false) {
            View::throwAppError("Invalid date input");
        }


        $from_time = new DateTime($_POST['from_time']);
        $to_time = new DateTime($_POST['to_time']);

        if (!$from_time || !$to_time || $from_time > $to_time) {
            View::throwAppError("Invalid date input");
        }

        $api = $this->__getApiBuilderInstance();

        $api_response = $api->request->asJson()->get('dt/malware/stats?from_date=' . $from_time->format('Y-m-d') . "&to_date=" . $to_time->format('Y-m-d'))->json();

        $this->checkApiFailure($api_response);

        if ($api_response) {
            View::displayJson($api_response);
        } else {
            View::throwAppError("No Honeypot Records Found !!");
        }
    }
}
